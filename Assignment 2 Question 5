#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int* data;
    int n;
} DiagonalMatrix;

typedef struct {
    int* main;
    int* upper;
    int* lower;
    int n;
} TriDiagonalMatrix;

typedef struct {
    int* data;
    int n;
} LowerTriangular;

typedef struct {
    int* data;
    int n;
} UpperTriangular;

typedef struct {
    int* data;
    int n;
} SymmetricMatrix;

DiagonalMatrix* createDiagonalMatrix(int n) {
    DiagonalMatrix* matrix = malloc(sizeof(DiagonalMatrix));
    matrix->data = calloc(n, sizeof(int));
    matrix->n = n;
    return matrix;
}

void setDiagonal(DiagonalMatrix* matrix, int i, int j, int value) {
    if (i == j && i < matrix->n) {
        matrix->data[i] = value;
    }
}

int getDiagonal(DiagonalMatrix* matrix, int i, int j) {
    if (i == j && i < matrix->n) {
        return matrix->data[i];
    }
    return 0;
}

TriDiagonalMatrix* createTriDiagonal(int n) {
    TriDiagonalMatrix* matrix = malloc(sizeof(TriDiagonalMatrix));
    matrix->main = calloc(n, sizeof(int));
    matrix->upper = calloc(n - 1, sizeof(int));
    matrix->lower = calloc(n - 1, sizeof(int));
    matrix->n = n;
    return matrix;
}

LowerTriangular* createLowerTriangular(int n) {
    LowerTriangular* matrix = malloc(sizeof(LowerTriangular));
    matrix->data = calloc(n * (n + 1) / 2, sizeof(int));
    matrix->n = n;
    return matrix;
}

void setLowerTriangular(LowerTriangular* matrix, int i, int j, int value) {
    if (i >= j) {
        int index = i * (i + 1) / 2 + j;
        matrix->data[index] = value;
    }
}

int getLowerTriangular(LowerTriangular* matrix, int i, int j) {
    if (i >= j) {
        int index = i * (i + 1) / 2 + j;
        return matrix->data[index];
    }
    return 0;
}

UpperTriangular* createUpperTriangular(int n) {
    UpperTriangular* matrix = malloc(sizeof(UpperTriangular));
    matrix->data = calloc(n * (n + 1) / 2, sizeof(int));
    matrix->n = n;
    return matrix;
}

void setUpperTriangular(UpperTriangular* matrix, int i, int j, int value) {
    if (i <= j) {
        int index = i * matrix->n - i * (i - 1) / 2 + j - i;
        matrix->data[index] = value;
    }
}

SymmetricMatrix* createSymmetric(int n) {
    SymmetricMatrix* matrix = malloc(sizeof(SymmetricMatrix));
    matrix->data = calloc(n * (n + 1) / 2, sizeof(int));
    matrix->n = n;
    return matrix;
}

void setSymmetric(SymmetricMatrix* matrix, int i, int j, int value) {
    if (i >= j) {
        int index = i * (i + 1) / 2 + j;
        matrix->data[index] = value;
    } else {
        int index = j * (j + 1) / 2 + i;
        matrix->data[index] = value;
    }
}

int main() {
    DiagonalMatrix* diagonal = createDiagonalMatrix(4);
    setDiagonal(diagonal, 0, 0, 1);
    setDiagonal(diagonal, 1, 1, 2);
    setDiagonal(diagonal, 2, 2, 3);
    setDiagonal(diagonal, 3, 3, 4);
    
    printf("Diagonal Matrix:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            printf("%d ", getDiagonal(diagonal, i, j));
        }
        printf("\n");
    }
    
    LowerTriangular* lower = createLowerTriangular(4);
    setLowerTriangular(lower, 0, 0, 1);
    setLowerTriangular(lower, 1, 0, 2);
    setLowerTriangular(lower, 1, 1, 3);
    setLowerTriangular(lower, 2, 0, 4);
    setLowerTriangular(lower, 2, 1, 5);
    setLowerTriangular(lower, 2, 2, 6);
    
    printf("\nLower Triangular Matrix:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            printf("%d ", getLowerTriangular(lower, i, j));
        }
        printf("\n");
    }
    
    free(diagonal->data);
    free(diagonal);
    free(lower->data);
    free(lower);
    
    return 0;
}
