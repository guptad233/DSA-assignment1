#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int row, col, value;
} Triplet;

typedef struct {
    Triplet* data;
    int rows, cols, count;
} SparseMatrix;

SparseMatrix* createSparseMatrix(int rows, int cols, int maxElements) {
    SparseMatrix* matrix = malloc(sizeof(SparseMatrix));
    matrix->data = malloc(maxElements * sizeof(Triplet));
    matrix->rows = rows;
    matrix->cols = cols;
    matrix->count = 0;
    return matrix;
}

void insertElement(SparseMatrix* matrix, int row, int col, int value) {
    if (value != 0) {
        matrix->data[matrix->count].row = row;
        matrix->data[matrix->count].col = col;
        matrix->data[matrix->count].value = value;
        matrix->count++;
    }
}

void printSparseMatrix(SparseMatrix* matrix) {
    printf("Row\tCol\tValue\n");
    for (int i = 0; i < matrix->count; i++) {
        printf("%d\t%d\t%d\n", matrix->data[i].row, matrix->data[i].col, matrix->data[i].value);
    }
}

SparseMatrix* transposeSparse(SparseMatrix* matrix) {
    SparseMatrix* result = createSparseMatrix(matrix->cols, matrix->rows, matrix->count);
    result->count = matrix->count;
    for (int i = 0; i < matrix->count; i++) {
        result->data[i].row = matrix->data[i].col;
        result->data[i].col = matrix->data[i].row;
        result->data[i].value = matrix->data[i].value;
    }
    return result;
}

SparseMatrix* addSparse(SparseMatrix* a, SparseMatrix* b) {
    if (a->rows != b->rows || a->cols != b->cols) return NULL;
    SparseMatrix* result = createSparseMatrix(a->rows, a->cols, a->count + b->count);
    int i = 0, j = 0, k = 0;
    while (i < a->count && j < b->count) {
        if (a->data[i].row < b->data[j].row || 
            (a->data[i].row == b->data[j].row && a->data[i].col < b->data[j].col)) {
            result->data[k++] = a->data[i++];
        } else if (a->data[i].row > b->data[j].row || 
                  (a->data[i].row == b->data[j].row && a->data[i].col > b->data[j].col)) {
            result->data[k++] = b->data[j++];
        } else {
            result->data[k].row = a->data[i].row;
            result->data[k].col = a->data[i].col;
            result->data[k].value = a->data[i].value + b->data[j].value;
            if (result->data[k].value != 0) k++;
            i++; j++;
        }
    }
    while (i < a->count) result->data[k++] = a->data[i++];
    while (j < b->count) result->data[k++] = b->data[j++];
    result->count = k;
    return result;
}

SparseMatrix* multiplySparse(SparseMatrix* a, SparseMatrix* b) {
    if (a->cols != b->rows) return NULL;
    SparseMatrix* result = createSparseMatrix(a->rows, b->cols, a->count * b->count);
    
    for (int i = 0; i < a->count; i++) {
        for (int j = 0; j < b->count; j++) {
            if (a->data[i].col == b->data[j].row) {
                int value = a->data[i].value * b->data[j].value;
                int row = a->data[i].row;
                int col = b->data[j].col;
                
                int found = 0;
                for (int k = 0; k < result->count; k++) {
                    if (result->data[k].row == row && result->data[k].col == col) {
                        result->data[k].value += value;
                        found = 1;
                        break;
                    }
                }
                if (!found) {
                    result->data[result->count].row = row;
                    result->data[result->count].col = col;
                    result->data[result->count].value = value;
                    result->count++;
                }
            }
        }
    }
    return result;
}

int main() {
    SparseMatrix* matrix1 = createSparseMatrix(4, 4, 10);
    insertElement(matrix1, 0, 0, 5);
    insertElement(matrix1, 1, 1, 8);
    insertElement(matrix1, 2, 3, 3);
    insertElement(matrix1, 3, 2, 6);
    
    printf("Original Matrix:\n");
    printSparseMatrix(matrix1);
    
    SparseMatrix* transposed = transposeSparse(matrix1);
    printf("\nTransposed Matrix:\n");
    printSparseMatrix(transposed);
    
    SparseMatrix* matrix2 = createSparseMatrix(4, 4, 10);
    insertElement(matrix2, 0, 0, 2);
    insertElement(matrix2, 1, 1, 4);
    insertElement(matrix2, 2, 3, 1);
    
    SparseMatrix* added = addSparse(matrix1, matrix2);
    printf("\nAdded Matrix:\n");
    printSparseMatrix(added);
    
    free(matrix1->data);
    free(matrix1);
    free(matrix2->data);
    free(matrix2);
    free(transposed->data);
    free(transposed);
    free(added->data);
    free(added);
    
    return 0;
}
