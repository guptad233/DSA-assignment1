#include <stdio.h>

int countInversions(int arr[], int n) {
    int count = 0;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] > arr[j]) {
                count++;
                printf("Inversion: arr[%d] = %d > arr[%d] = %d\n", i, arr[i], j, arr[j]);
            }
        }
    }
    return count;
}

int mergeAndCount(int arr[], int temp[], int left, int mid, int right) {
    int i, j, k;
    int invCount = 0;
    
    i = left;
    j = mid;
    k = left;
    
    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            invCount += (mid - i);
        }
    }
    
    while (i <= mid - 1) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];
    
    for (i = left; i <= right; i++) arr[i] = temp[i];
    
    return invCount;
}

int mergeSortAndCount(int arr[], int temp[], int left, int right) {
    int invCount = 0;
    if (left < right) {
        int mid = (left + right) / 2;
        invCount += mergeSortAndCount(arr, temp, left, mid);
        invCount += mergeSortAndCount(arr, temp, mid + 1, right);
        invCount += mergeAndCount(arr, temp, left, mid + 1, right);
    }
    return invCount;
}

int countInversionsOptimal(int arr[], int n) {
    int* temp = (int*)malloc(sizeof(int) * n);
    int result = mergeSortAndCount(arr, temp, 0, n - 1);
    free(temp);
    return result;
}

int main() {
    int arr1[] = {2, 3, 8, 6, 1};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    
    printf("Array: ");
    for (int i = 0; i < n1; i++) {
        printf("%d ", arr1[i]);
    }
    printf("\n");
    
    int inversions = countInversions(arr1, n1);
    printf("\nTotal inversions (Brute Force): %d\n", inversions);
    
    int arr2[] = {2, 3, 8, 6, 1};
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    int optimalInversions = countInversionsOptimal(arr2, n2);
    printf("Total inversions (Optimal): %d\n", optimalInversions);
    
    return 0;
}
